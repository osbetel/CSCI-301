#lang racket

(define tokens '(thousand million billion trillion quadrillion quintillion sextillion septillion octillion nonillion decillion
                          undecillion duodecillion tredecillion quattuor-decillion quindeccillion sexdecillion septen-decillion
                          octodecillion novemdecillion vigintillion)) ;goes up to 10^63

(define (rmle lst)
    (if (null? (cdr lst))
        '()
        (cons (car lst) (rmle (cdr lst)))
    )
)

(define (rm3 lst)
  (rmle (rmle (rmle lst)))
)

(define (rm2 lst)
  (rmle (rmle lst))
)
                           

;function to convert numbers into a list: eg 582 -> '(5 8 2)
(define (int-list num)
  (if (zero? num)
      `()    ;Return an empty list if zero since (number-name 0) == '()
       (append (int-list (quotient num 10)) (list (remainder num 10))) ;Just like a division and modulus function
  )
)

;takes list '(1 2 3 4 5 6) and changes it to '(123 456)
(define (int-list-by3 numlst len)
  (cond [(>= len 3) (list (rm3 numlst) (by3-helper numlst len))])
)

(define (by3-helper numlst len)
  (define x (number->string (list-ref numlst (- len 3))))
  (define y (number->string (list-ref numlst (- len 2))))
  (define z (number->string (list-ref numlst (- len 1))))
  (list (string->number(string-append (string-append x y) z)))
)

(define (processlst numlst)
  ;(display numlst) (newline)
  (cond [(list? numlst) (int-list-by3 numlst (length numlst))]
        [else numlst])
)

(define (manage twinlst times)
  (cond [(list? twinlst)
  (define x (list-ref twinlst 0))
  (define y (list-ref twinlst 1))
  (define pplst (processlst x))

  (if (not (= times 0))
      (append (manage (list (list-ref pplst 0) (list-ref pplst 1)) (- times 1)) (list-ref pplst 1))
      x
  )]
        [else twinlst])
  ;(append (car (process numlst)) (list-ref (process numlst) (- (length (process numlst)) 1)))
)

(define (clean-front numlst)
  ;is there 1 or 2 values at the front?
  (cond [(< (second numlst) 10) (combine-first-two numlst)]
        [else numlst])
)

(define (combine-first-two numlst)
  (define x (string->number (string-append (number->string (first numlst)) (number->string(second numlst)))))
  (append (list x) (cdr (cdr numlst)))
)
          

(define (number-name-calc num)
  ;convert to a list
  (define numlst (int-list num))
  (define result '())
  (define times (quotient (length numlst) 3))
  (define twinlst (list numlst result))
  (clean-front (manage twinlst times))
 
  
  ;while len > 0, add numbers in groups of 3 to the resultlst, from left-to-right, and decrement ln
  ;eg, if len = 9, then, the number is in the form xxx,xxx,xxx. So, that would be '(xxx million xxx thousand xxx)
  ;so len/3 gives 9/3 = 3, which means we can use this as 3 = millions place, 3 - 1 = 2 = thousands place, 3 - 2 = 1
  ; = ones place
)

(define (list-insert x index lst)
  (if (= index 0)
      (cons x lst)
      (cons (first lst) (list-insert x (- index 1) (rest lst)))
  )
)

(define (insert-tokens numlst places insert)
  (if (not (= places -1)) ;if places = 2, we 
      (insert-tokens (list-insert (list-ref tokens places) insert numlst) (- places 1) (+ insert 2))
      numlst
  )
)
  

(define (number-name num)
  (define lst (number-name-calc num))
  (define places (- (length lst) 2))
  (insert-tokens lst places 1)
)
(define (t)
  (display (number-name 123456789)) (newline)
  (display (number-name 842937498345)) (newline)
)

